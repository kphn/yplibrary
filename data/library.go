package data

import (
	"crypto/tls"
	"encoding/csv"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

// GetYpLibVisitNum 获取杨浦图书馆访问数
func GetYpLibVisitNum(openID, sessionID string) {

	now := time.Now()
	if now.Hour() < 8 || now.Hour() > 22 {
		return
	}

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	body := strings.NewReader(`Request=KeLiu&beginTime=09:00:00&endTime=21:00:00`)
	req, err := http.NewRequest("POST", "https://www.yplib.org.cn/visit.axd?KeLiu", body)
	if err != nil {
		log.Println(err)
		return
	}

	req.Host = "www.yplib.org.cn"
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Accept", "text/plain, */*; q=0.01")
	req.Header.Set("Origin", "https://www.yplib.org.cn")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Linux; Android 9; MI 6 Build/PKQ1.190118.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/6.2 TBS/045111 Mobile Safari/537.36 MMWEBID/8223 MicroMessenger/7.0.10.1580(0x27000AFD) Process/tools NetType/WIFI Language/zh_CN ABI/arm64")
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")
	req.Header.Set("Referer", "https://www.yplib.org.cn/Sub.html")
	req.Header.Set("Accept-Encoding", "gzip, deflate, br")
	req.Header.Set("Accept-Language", "zh-CN,en-US;q=0.9")
	req.Header.Set("Cookie", fmt.Sprintf("OpenId=%s; ASP.NET_SessionId=%s", openID, sessionID))

	resp, err := client.Do(req)
	if err != nil {
		// handle err
		log.Println(err)
		return
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Println(err)
		return
	}

	doc.Each(func(i int, selection *goquery.Selection) {
		currentNum := selection.Find("body > p:nth-child(1) > span").Text()
		totalNum := selection.Find("body > p:nth-child(3) > span").Text()

		csvFile, err := csvFile()
		if err != nil {
			log.Println(err)
			return
		}

		writer := csv.NewWriter(csvFile)
		defer writer.Flush()

		if err := writer.Write([]string{fmt.Sprintf("%d", time.Now().Unix()), currentNum, totalNum}); err != nil {
			log.Println(err)
			return
		}
	})

	if err := GenChart(time.Now()); err != nil {
		log.Println(err)
	}

}

func csvFile() (*os.File, error) {
	csvFile := fileName(time.Now())
	f, err := os.OpenFile(csvFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return nil, err
	}
	return f, nil
}

func fileName(t time.Time) string {
	return t.Format("20060102.csv")
}
